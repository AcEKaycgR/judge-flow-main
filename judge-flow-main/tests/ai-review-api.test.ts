import { render, screen, waitFor } from '@testing-library/react';\nimport { rest } from 'msw';\nimport { setupServer } from 'msw/node';\nimport * as api from '@/lib/api';\n\n// Mock data for API responses\nconst mockComprehensiveReview = {\n  feedback: \"# Comprehensive AI Code Review\\n\\n## Overall Statistics\\n\\nTotal Submissions: 25\\nAccepted Solutions: 14\\nAccuracy Rate: 56.0%\\n\\n## Category Performance\\n\\n### Array\\n- Problems Solved: 8/10\\n- Accuracy: 80.0%\\n\\n### String\\n- Problems Solved: 5/8\\n- Accuracy: 62.5%\\n\\n## Recommendations\\n\\n- Continue practicing regularly\\n- Focus on improving code efficiency\\n- Review failed submissions to understand mistakes\\n\\n## Next Steps\\n\\n- Set a daily coding goal\\n- Focus on your weakest categories\\n- Review and refactor old solutions for better efficiency\\n\",\n  overall_score: 56.0,\n  category_scores: {\n    \"Array\": { \"total\": 10, \"solved\": 8 },\n    \"String\": { \"total\": 8, \"solved\": 5 }\n  },\n  total_submissions: 25,\n  accepted_submissions: 14,\n  accuracy_rate: 56.0\n};\n\nconst mockProblemReview = {\n  feedback: \"# Code Review for Two Sum\\n\\n## AI Analysis Results\\n\\nCompletion Percentage: 85%\\nCode Quality: Good basic implementation with room for improvement\\n\\n## What You Implemented Well\\n\\n- Basic structure implemented\\n\\n## Missing Components\\n\\n- Advanced error handling\\n- Edge case coverage\\n\\n## Suggestions for Improvement\\n\\n- Add comments to explain complex logic\\n- Consider refactoring to reduce code complexity\\n\\n## Next Steps\\n\\n- Add comprehensive test cases\\n- Optimize for performance\\n\",\n  overall_score: 85,\n  ai_analysis: {\n    \"completion_percentage\": 85,\n    \"implemented_correctly\": [\"Basic structure implemented\"],\n    \"missing_components\": [\"Advanced error handling\", \"Edge case coverage\"],\n    \"suggestions\": [\"Add comments to explain complex logic\", \"Consider refactoring to reduce code complexity\"],\n    \"code_quality\": \"Good basic implementation with room for improvement\",\n    \"next_steps\": [\"Add comprehensive test cases\", \"Optimize for performance\"]\n  }\n};\n\nconst mockUserProgress = {\n  progress_data: [\n    {\n      date: \"2025-08-15T10:00:00Z\",\n      total_submissions: 20,\n      accepted_submissions: 12,\n      accuracy_rate: 60.0\n    },\n    {\n      date: \"2025-08-16T10:00:00Z\",\n      total_submissions: 25,\n      accepted_submissions: 14,\n      accuracy_rate: 56.0\n    }\n  ],\n  category_breakdown: {\n    \"Array\": { \"total\": 10, \"solved\": 8 },\n    \"String\": { \"total\": 8, \"solved\": 5 }\n  }\n};\n\n// Setup MSW server for mocking API calls\nconst server = setupServer(\n  rest.post('/api/ai-review/comprehensive-ai-review/', (req, res, ctx) => {\n    return res(ctx.json(mockComprehensiveReview));\n  }),\n  rest.post('/api/ai-review/problems/1/ai-review/', (req, res, ctx) => {\n    return res(ctx.json(mockProblemReview));\n  }),\n  rest.get('/api/ai-review/user-progress/', (req, res, ctx) => {\n    return res(ctx.json(mockUserProgress));\n  })\n);\n\nbeforeAll(() => server.listen());\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());\n\ndescribe('API Integration Tests', () => {\n  test('getComprehensiveAIReview should fetch comprehensive review data', async () => {\n    const data = await api.getComprehensiveAIReview();\n    \n    expect(data).toEqual(mockComprehensiveReview);\n    expect(data.feedback).toBeDefined();\n    expect(data.overall_score).toBeDefined();\n  });\n\n  test('getProblemAIReview should fetch problem-specific review data', async () => {\n    const data = await api.getProblemAIReview(1, 'print(\"Hello, World!\")');\n    \n    expect(data).toEqual(mockProblemReview);\n    expect(data.feedback).toBeDefined();\n    expect(data.overall_score).toBeDefined();\n  });\n\n  test('getUserProgress should fetch user progress data', async () => {\n    const data = await api.getUserProgress();\n    \n    expect(data).toEqual(mockUserProgress);\n    expect(data.progress_data).toBeDefined();\n    expect(data.category_breakdown).toBeDefined();\n  });\n});